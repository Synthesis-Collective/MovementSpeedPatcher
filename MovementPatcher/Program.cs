using System;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace MovementPatcher {
	public class Program {
		private static Lazy<Settings> _lazySettings = null!;
		private static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
				.SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "MovementSpeedPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
		{
			if ( Settings.ShouldSkip() ) {
				Console.WriteLine( "\n\nAll settings for this patcher are disabled, patching failed without error.\n" );
				return;
			}
			Console.WriteLine( "\n\nMovement Speed Patcher\nRunning Patcher...\n" );

			// init record counter to 2 or 0 depending on whether game settings are enabled.
			var counter = Settings.GameSettings.AddGameSettingsToPatch( state );

			// iterate through movement types
			foreach ( var movt in state.LoadOrder.PriorityOrder.MovementType().WinningOverrides() ) {
				// skip null records, records from blacklisted mods, and skip any movement types without editor IDs as they probably shouldn't be touched
				if ( movt == null || movt.EditorID == null || Settings.IsModKeyBlacklisted(movt.FormKey.ModKey) )
					continue;
				var moveType = movt.DeepCopy(); // deep copy movement type to temp obj
				if ( moveType == null )
					continue;
				Console.WriteLine( "Processing Movement Type: \"" + movt.EditorID + '\"' );
				moveType = Settings.ApplySettingsToMovementType( moveType, out var modifiedRecordCount );
				if ( modifiedRecordCount > 0 ) {
					state.PatchMod.MovementTypes.Set( moveType );
					++counter;
					Console.WriteLine("\tModified " + modifiedRecordCount + " values.");
				}
				Console.WriteLine(); // keep a newline between entries
			}

			Console.WriteLine( "\n\nPatcher has completed successfully.\nModified " + counter + " records.\n" );
        }

		
    }
}
